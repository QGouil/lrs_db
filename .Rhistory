swsheet3 <- tidyr::gather(swsheet3, key = 'Tool', value = 'Val',
colnames(swsheet3)) %>%
dplyr::filter(Val == TRUE) %>%
dplyr::select(-Val) %>%
dplyr::arrange(Category)
colnames(swsheet3)
class(colnames(swsheet3))
swsheet3 <- tidyr::gather(swsheet3, key = 'Tool', value = 'Val',
colnames(swsheet3)) %>%
dplyr::filter(Val == TRUE) %>%
dplyr::select(-Val) %>%
dplyr::arrange(Category)
class(colnames(swsheet))
swsheet4 <- tidyr::gather(swsheet3, key = 'Tool', value = 'Val',
colnames(swsheet3)) %>%
dplyr::filter(Val == TRUE) %>%
dplyr::select(-Val) %>%
dplyr::arrange(Category)
swsheet4 <- tidyr::gather(swsheet3, key = 'Tool', value = 'Val',
as.character(colnames(swsheet3))) %>%
dplyr::filter(Val == TRUE) %>%
dplyr::select(-Val) %>%
dplyr::arrange(Category)
swsheet3$rows <- rownames(swsheet3)
rownames(swsheet3)
row.names(swsheet3)
swsheet3 <- t(swsheet)
colnames(swsheet3) <- swsheet3[1,]
swsheet3 <- swsheet3[ -1, ]
rownames(swsheet3)
swsheet$namedofrows <- rownames(swsheet3)
swsheet3$namedofrows <- rownames(swsheet3)
rownames(swsheet3)
swsheet3 <- t(swsheet)
colnames(swsheet3) <- swsheet3[1,]
swsheet3 <- swsheet3[ -1, ]
swsheet3$namedofrows <- as,character(rownames(swsheet3))
swsheet3$namedofrows <- as.character(rownames(swsheet3))
swsheet3$namedofrows
swsheet3$``
aRxiv::arxiv_search(id_list = "arXiv:1902.04341")
aRxiv::arxiv_search(id_list = "1902.04341")
aRxiv::arxiv_search(id_list = "1902.04341")$submitted
gsub (" *$", "",aRxiv::arxiv_search(id_list = "1902.04341")$submitted)
gsub ("\t.*$", "",aRxiv::arxiv_search(id_list = "1902.04341")$submitted)
gsub ("\t*.$", "",aRxiv::arxiv_search(id_list = "1902.04341")$submitted)
gsub (" .*$", "",aRxiv::arxiv_search(id_list = "1902.04341")$submitted)
#stringr::str_detect(dois, paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep="") | "arXiv")
doi <- "arXiv:1902.04341"
stringr::str_detect(dois, paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep="") | "arXiv")
stringr::str_detect(doi, paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep="") | "arXiv")
class(doi)
doi <- as.factor("arXiv:1902.04341")
class(doi)
stringr::str_detect(doi, paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep="") | "arXiv")
stringr::str_detect(doi, c(paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep="") | "arXiv"))
doi
stringr::str_detect(doi, paste(paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep=""),"arXiv", collapse="|"))
paste(paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep=""),"arXiv", collapse="|")
paste(paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep=""),"arXiv", collapse=",")
stringr::str_detect(doi, paste(paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep=""),"arXiv", collapse=","))
c(paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep=""),"arXiv")
stringr::str_detect(doi, c(paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep=""),"arXiv"))
stringr::str_detect(doi, paste(c(paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep=""),"arXiv")), collapse="|")
stringr::str_detect(doi, paste(c(paste("10.1101/", stringr::regex("[0-9]{1,6}$", ignore_case = TRUE), sep=""),"arXiv"), collapse ="|"))
.libPaths()
# Loading libraries
library(readr)
library(jsonlite)
library(docopt)
library(pbapply)
library(magrittr)
library(futile.logger)
library(aRxiv)
library(reshape2)
library(dplyr)
library(ggplot2)
# load the swsheet here
swsheet <- readr::read_csv("lrs_tools_master.csv", # ge the correct path
col_types = readr::cols(
Tool = readr::col_character(),
DOI = readr::col_character(),
Programming_Language = readr::col_character(),
Details = readr::col_character(),
Source = readr::col_character(),
License = readr::col_character(),
.default = readr::col_logical()
)) %>%
dplyr::rename(Name = Tool,
Platform = Programming_Language,
DOIs = DOI,
Description = Details,
Code = Source)
swsheet <- swsheet[order(swsheet$Name),]
`%>%` <- magrittr::`%>%`
swsheet$PubDates <- as.Date.character(as.character(swsheet$PubDates))
swsheet          <- swsheet[!is.na(swsheet$PubDates),]
head(swsheet)
swsheet <- readr::read_csv("lrs_tools_master.csv", # ge the correct path
col_types = readr::cols(
Tool = readr::col_character(),
DOI = readr::col_character(),
Programming_Language = readr::col_character(),
Details = readr::col_character(),
Source = readr::col_character(),
License = readr::col_character(),
.default = readr::col_logical()
)) %>%
dplyr::rename(Name = Tool,
Platform = Programming_Language,
DOIs = DOI,
Description = Details,
Code = Source)
swsheet <- swsheet[order(swsheet$Name),]
head(swsheet)
getwd()
swsheet <- readr::read_csv("lrs_tools_master.csv", # get the correct path
col_types = readr::cols(
Tool = readr::col_character(),
DOI = readr::col_character(),
Programming_Language = readr::col_character(),
Details = readr::col_character(),
Source = readr::col_character(),
License = readr::col_character(),
.default = readr::col_logical()
)) %>%
dplyr::rename(Name = Tool,
Platform = Programming_Language,
DOIs = DOI,
Description = Details,
Code = Source)
str(swsheet)
dim(swsheet)
swsheet <- swsheet[order(swsheet$Name),]
dim(swsheet)
`%>%` <- magrittr::`%>%`
swsheet$PubDates <- as.Date.character(as.character(swsheet$PubDates))
swsheet          <- swsheet[!is.na(swsheet$PubDates),]
dim(swsheet)
swsheet <- readr::read_csv("lrs_tools_master.csv", # get the correct path
col_types = readr::cols(
Tool = readr::col_character(),
DOI = readr::col_character(),
Programming_Language = readr::col_character(),
Details = readr::col_character(),
Source = readr::col_character(),
License = readr::col_character(),
.default = readr::col_logical()
)) %>%
dplyr::rename(Name = Tool,
Platform = Programming_Language,
DOIs = DOI,
Description = Details,
Code = Source)
swsheet <- swsheet[order(swsheet$Name),]
head(as.Date.character(as.character(swsheet$PubDates)))
catcounts <- swsheet %>%
dplyr::summarise_at(12:42, sum) %>%
tidyr::gather(key = Category, value = Count) %>%
dplyr::arrange(-Count, Category) %>%
dplyr::mutate(Prop = Count / nrow(swsheet)) %>%
dplyr::mutate(Category = ifelse(Category == "SNPAndVariantAnalysis", "SNP And Variant Analysis", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
dplyr::mutate(Category = ifelse(Category == "polyALengthEstimation", "polyA Length Estimation", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
dplyr::mutate(Category = stringr::str_trim(Category)) %>%
dplyr::mutate(Category = factor(Category, levels = Category)) %>%
dplyr::mutate(Percent = round(Prop * 100, 1))
plot <- ggplot2::ggplot(catcounts,
ggplot2::aes(x = Category, weight = Prop,
text = paste("Count:", Count, "\n",
"Percent:", Percent))) +
ggplot2::geom_bar(fill="coral") +
cowplot::theme_cowplot() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::ylab("Percentage of Tools") +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size=24),
axis.text       = ggplot2::element_text(size = 20),
axis.text.x     = ggplot2::element_text(angle = 60,
hjust = 1,
vjust = 1)
)
plot <- plotly::ggplotly(plot, tooltip = c("x", "text")) %>%
plotly::layout(margin = list(l = 80, r = 10, b = 200, t = 50))
plot
htmlwidgets::saveWidget(widgetframe::frameableWidget(plot),
file.path(paste("../Manuscript_figures/" , "Figure1_p2_new.html")),
selfcontained = FALSE, libdir = "libraries")
dim(swsheet %>%
left_join(title_df, by = c("DOIs" = "DOI")) %>%
select(-c(DOI, Title, PubDate)))
for (dois in swsheet$DOIs) {
for (doi in stringr::str_split(dois, ";")[[1]]) {
if (!is.na(doi) & !(doi %in% titles_cache$DOI)) {
if (stringr::str_detect(doi, "arxiv")) {
id <- stringr::str_remove(doi, "arxiv/")
title <- aRxiv::arxiv_search(id_list = id)$title
date <- gsub (" .*$", "",aRxiv::arxiv_search(id_list = id)$submitted)
} else {
crossref <- rcrossref::cr_works(doi)
title <- crossref$data$title
date <- crossref$data$issued
date <- as.character(date)
}
if (!is.null(title)) {
title_df <- data.frame(DOI = doi,
Title = title,
PubDate = suppressWarnings(readr::parse_date(date, na = NA_character_)) %>%
lubridate::as_date())
}
}
}
}
for (dois in swsheet$DOIs) {
for (doi in stringr::str_split(dois, ";")[[1]]) {
if (!is.na(doi)) {
if (stringr::str_detect(doi, "arxiv")) {
id <- stringr::str_remove(doi, "arxiv/")
title <- aRxiv::arxiv_search(id_list = id)$title
date <- gsub (" .*$", "",aRxiv::arxiv_search(id_list = id)$submitted)
} else {
crossref <- rcrossref::cr_works(doi)
title <- crossref$data$title
date <- crossref$data$issued
date <- as.character(date)
}
if (!is.null(title)) {
title_df <- data.frame(DOI = doi,
Title = title,
PubDate = suppressWarnings(readr::parse_date(date, na = NA_character_)) %>%
lubridate::as_date())
}
}
}
}
head(title_df)
head(swsheet %>%
left_join(title_df, by = c("DOIs" = "DOI")) %>%
select(-c(DOI, Title, PubDate)))
head(swsheet %>%
left_join(title_df, by = c("DOI" = "DOIs")) %>%
select(-c(DOI, Title, PubDate)))
head(merge(swsheet, title_df, by = intersect(swsheet$DOIs, title_df$DOI)))
head(title_df$PubDate[title_df$DDOI==swsheet$DOIs])
head(title_df$PubDate[title_df$DDOI==swsheet$DOIs,])
head(title_df$PubDate[title_df$DOI==swsheet$DOIs])
head(title_df$PubDate[title_df$DOI==swsheet$DOIs,])
head(title_df$PubDate[title_df$DOI%in%swsheet$DOIs])
title_df$PubDate[,title_df$DOI%in%swsheet$DOIs]
title_df$PubDate[title_df$DOI%in%swsheet$DOIs]
title_df$PubDate
head(title_df)
titles <- readr::read_csv("docs/data/titles.csv",
col_types = readr::cols(
DOI   = readr::col_character(),
Title = readr::col_character(),
PubDate = readr::col_date()
)
)
dim(titles)
titles$PubDate[titles$DOI%in%swsheet$DOIs]
swsheet$PubDates <- titles$PubDate[titles$DOI%in%swsheet$DOIs]
titles$PubDate[titles$DOI==swsheet$DOIs]
dim(swsheet)
swsheet %>%
left_join(titles, by = c("DOI" = "DOIs"))
titles$PubDate[swsheet$DOIs%in% titles$DOI]
titles$PubDate[match(swsheet$DOIs,titles$DOI)]
t
swsheet$PubDates <- titles$PubDate[match(swsheet$DOIs,titles$DOI)]
`%>%` <- magrittr::`%>%`
swsheet$PubDates <- as.Date.character(as.character(swsheet$PubDates))
swsheet          <- swsheet[!is.na(swsheet$PubDates),]
dim(swsheet)
swsheet <- readr::read_csv("lrs_tools_master.csv", # get the correct path
col_types = readr::cols(
Tool = readr::col_character(),
DOI = readr::col_character(),
Programming_Language = readr::col_character(),
Details = readr::col_character(),
Source = readr::col_character(),
License = readr::col_character(),
.default = readr::col_logical()
)) %>%
dplyr::rename(Name = Tool,
Platform = Programming_Language,
DOIs = DOI,
Description = Details,
Code = Source)
swsheet <- swsheet[order(swsheet$Name),]
# getting the publication details for the tools
titles <- readr::read_csv("docs/data/titles.csv",
col_types = readr::cols(
DOI   = readr::col_character(),
Title = readr::col_character(),
PubDate = readr::col_date()
)
)
swsheet$PubDates <- titles$PubDate[match(swsheet$DOIs,titles$DOI)]
`%>%` <- magrittr::`%>%`
swsheet$PubDates <- as.Date.character(as.character(swsheet$PubDates))
swsheet.original <- swsheet
swsheet          <- swsheet[!is.na(swsheet$PubDates),]
datecount_nanopore <- swsheet %>%
dplyr::select(Date = PubDates,
technology = "OxfordNanopore") %>%
dplyr::filter(technology == TRUE) %>%
dplyr::group_by(Date = as.Date(Date)) %>%
dplyr::summarise(Count = n()) %>%
tidyr::complete(Date = tidyr::full_seq(Date, 1),
fill = list(Count = 0)) %>%
dplyr::mutate(Total_nanopore = cumsum(Count))
head(datecount_nanopore)
dim(swsheet)
dim(swsheet.original)
catcounts <- swsheet.original %>%
dplyr::summarise_at(12:42, sum) %>%
tidyr::gather(key = Category, value = Count) %>%
dplyr::arrange(-Count, Category) %>%
dplyr::mutate(Prop = Count / nrow(swsheet)) %>%
dplyr::mutate(Category = ifelse(Category == "SNPAndVariantAnalysis", "SNP And Variant Analysis", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
dplyr::mutate(Category = ifelse(Category == "polyALengthEstimation", "polyA Length Estimation", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
dplyr::mutate(Category = stringr::str_trim(Category)) %>%
dplyr::mutate(Category = factor(Category, levels = Category)) %>%
dplyr::mutate(Percent = round(Prop * 100, 1))
plot <- ggplot2::ggplot(catcounts,
ggplot2::aes(x = Category, weight = Prop,
text = paste("Count:", Count, "\n",
"Percent:", Percent))) +
ggplot2::geom_bar(fill="coral") +
cowplot::theme_cowplot() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::ylab("Percentage of Tools") +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size=24),
axis.text       = ggplot2::element_text(size = 20),
axis.text.x     = ggplot2::element_text(angle = 60,
hjust = 1,
vjust = 1)
)
plot <- plotly::ggplotly(plot, tooltip = c("x", "text")) %>%
plotly::layout(margin = list(l = 80, r = 10, b = 200, t = 50))
htmlwidgets::saveWidget(widgetframe::frameableWidget(plot),
file.path(paste("../Manuscript_figures/" , "Figure1_p2_new.html")),
selfcontained = FALSE, libdir = "libraries")
plot
catcounts <- swsheet.original %>%
dplyr::summarise_at(12:42, sum) %>%
tidyr::gather(key = Category, value = Count) %>%
dplyr::arrange(-Count, Category) %>%
dplyr::mutate(Prop = Count / nrow(swsheet)) %>%
dplyr::mutate(Category = ifelse(Category == "SNPAndVariantAnalysis", "SNP And Variant Analysis", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
dplyr::mutate(Category = ifelse(Category == "polyALengthEstimation", "polyA Length Estimation", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
dplyr::mutate(Category = ifelse(Category == "fast5FileProcessing", "fast5 File Processing", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
dplyr::mutate(Category = stringr::str_trim(Category)) %>%
dplyr::mutate(Category = factor(Category, levels = Category)) %>%
dplyr::mutate(Percent = round(Prop * 100, 1))
plot <- ggplot2::ggplot(catcounts,
ggplot2::aes(x = Category, weight = Prop,
text = paste("Count:", Count, "\n",
"Percent:", Percent))) +
ggplot2::geom_bar(fill="coral") +
cowplot::theme_cowplot() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::ylab("Percentage of Tools") +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size=24),
axis.text       = ggplot2::element_text(size = 20),
axis.text.x     = ggplot2::element_text(angle = 60,
hjust = 1,
vjust = 1)
)
plot <- plotly::ggplotly(plot, tooltip = c("x", "text")) %>%
plotly::layout(margin = list(l = 80, r = 10, b = 200, t = 50))
htmlwidgets::saveWidget(widgetframe::frameableWidget(plot),
file.path(paste("../Manuscript_figures/" , "Figure1_p2_new.html")),
selfcontained = FALSE, libdir = "libraries")
plot
catcounts <- swsheet.original %>%
dplyr::summarise_at(12:42, sum) %>%
tidyr::gather(key = Category, value = Count) %>%
dplyr::arrange(-Count, Category) %>%
dplyr::mutate(Prop = Count / nrow(swsheet)) %>%
dplyr::mutate(Category = ifelse(Category == "SNPAndVariantAnalysis", "SNP And Variant Analysis",
ifelse (Category == "polyALengthEstimation", "polyA Length Estimation",
ifelse(Category == "fast5FileProcessing", "fast5 File Processing", gsub("([a-z])([A-Z])", "\\1 \\2", Category))))%>%
#gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
#dplyr::mutate(Category = ifelse(Category == "polyALengthEstimation", "polyA Length Estimation", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
#dplyr::mutate(Category = ifelse(Category == "fast5FileProcessing", "fast5 File Processing", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
dplyr::mutate(Category = stringr::str_trim(Category)) %>%
dplyr::mutate(Category = factor(Category, levels = Category)) %>%
dplyr::mutate(Percent = round(Prop * 100, 1))
)
catcounts <- swsheet.original %>%
dplyr::summarise_at(12:42, sum) %>%
tidyr::gather(key = Category, value = Count) %>%
dplyr::arrange(-Count, Category) %>%
dplyr::mutate(Prop = Count / nrow(swsheet)) %>%
dplyr::mutate(Category = ifelse(Category == "SNPAndVariantAnalysis", "SNP And Variant Analysis",
ifelse(Category == "polyALengthEstimation", "polyA Length Estimation",
ifelse(Category == "fast5FileProcessing", "fast5 File Processing", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))))%>%
#gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
#dplyr::mutate(Category = ifelse(Category == "polyALengthEstimation", "polyA Length Estimation", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
#dplyr::mutate(Category = ifelse(Category == "fast5FileProcessing", "fast5 File Processing", gsub("([a-z])([A-Z])", "\\1 \\2", Category)))%>%
dplyr::mutate(Category = stringr::str_trim(Category)) %>%
dplyr::mutate(Category = factor(Category, levels = Category)) %>%
dplyr::mutate(Percent = round(Prop * 100, 1)
)
plot <- ggplot2::ggplot(catcounts,
ggplot2::aes(x = Category, weight = Prop,
text = paste("Count:", Count, "\n",
"Percent:", Percent))) +
ggplot2::geom_bar(fill="coral") +
cowplot::theme_cowplot() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::ylab("Percentage of Tools") +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size=24),
axis.text       = ggplot2::element_text(size = 20),
axis.text.x     = ggplot2::element_text(angle = 60,
hjust = 1,
vjust = 1)
)
plot
plot <- plotly::ggplotly(plot, tooltip = c("x", "text")) %>%
plotly::layout(margin = list(l = 80, r = 10, b = 200, t = 50))
htmlwidgets::saveWidget(widgetframe::frameableWidget(plot),
file.path(paste("../Manuscript_figures/" , "Figure1_p2_new.html")),
selfcontained = FALSE, libdir = "libraries")
plot
plot <- ggplot2::ggplot(catcounts,
ggplot2::aes(x = Category, weight = Prop,
text = paste("Count:", Count, "\n",
"Percent:", Percent))) +
ggplot2::geom_bar(fill="coral") +
cowplot::theme_cowplot() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::ylab("Percentage of Tools") +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size=24),
axis.text       = ggplot2::element_text(size = 20),
axis.text.x     = ggplot2::element_text(angle = 60,
hjust = 1,
vjust = 1)
)
plot
plot <- ggplot2::ggplot(catcounts,
ggplot2::aes(x = Category, weight = Prop,
text = paste("Count:", Count, "\n",
"Percent:", Percent))) +
ggplot2::geom_bar(fill="darkgoldenrod1") +
cowplot::theme_cowplot() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::ylab("Percentage of Tools") +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size=24),
axis.text       = ggplot2::element_text(size = 20),
axis.text.x     = ggplot2::element_text(angle = 60,
hjust = 1,
vjust = 1)
)
plot
plot <- ggplot2::ggplot(catcounts,
ggplot2::aes(x = Category, weight = Prop,
text = paste("Count:", Count, "\n",
"Percent:", Percent))) +
ggplot2::geom_bar(fill="darkgoldenrod2") +
cowplot::theme_cowplot() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::ylab("Percentage of Tools") +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size=24),
axis.text       = ggplot2::element_text(size = 20),
axis.text.x     = ggplot2::element_text(angle = 60,
hjust = 1,
vjust = 1)
)
plot
plot <- ggplot2::ggplot(catcounts,
ggplot2::aes(x = Category, weight = Prop,
text = paste("Count:", Count, "\n",
"Percent:", Percent))) +
ggplot2::geom_bar(fill="darkorange") +
cowplot::theme_cowplot() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::ylab("Percentage of Tools") +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size=24),
axis.text       = ggplot2::element_text(size = 20),
axis.text.x     = ggplot2::element_text(angle = 60,
hjust = 1,
vjust = 1)
)
plot
plot <- ggplot2::ggplot(catcounts,
ggplot2::aes(x = Category, weight = Prop,
text = paste("Count:", Count, "\n",
"Percent:", Percent))) +
ggplot2::geom_bar(fill="coral") +
cowplot::theme_cowplot() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::ylab("Percentage of Tools") +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_text(size=24),
axis.text       = ggplot2::element_text(size = 20),
axis.text.x     = ggplot2::element_text(angle = 60,
hjust = 1,
vjust = 1)
)
plot
getwd()
rcrossref::cr_works("10.1089/cmb.2012.0021")
rcrossref::cr_works("10.1186/1471-2164-15-699")
